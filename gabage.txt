@login_required
def home(request):
    form = PersonBookingForm()
    if request.method == "POST":
        data = request.POST
        name = request.POST.get("name")
        email = request.POST.get("email")
        contact = request.POST.get("contact")
        devices = request.POST.get("devices")
        date_1 = request.POST.get("date")
        end_time = request.POST.get("end_time")
        start_time = request.POST.get("time")

        start = int(start_time.split(":")[0])
        end = int(end_time.split(":")[0])
        if start > end:
            if not 7 <= start <= 18 and not 7 <= end <= 18:
                messages.add_message(
                    request, messages.ERROR, "Time should be between 7am to 6pm"
                )
                return render(request, "index.html", {"form": form, "data": data})
            messages.add_message(
                request, messages.ERROR, "End Time should greater than Start Time"
            )
            return render(request, "index.html", {"form": form, "data": data})

        todays_date = date.today().strftime("%y-%m-%d")
        new = "20" + todays_date
        current_booked = PersonBooking.objects.all().filter(date=new)
        for cb in current_booked:
            print(cb.time)
            if int(str(cb.time).split(":")[0]) == start:
                messages.add_message(
                    request, messages.ERROR, "This Time is already booked"
                )
                return render(request, "index.html", {"form": form, "data": data})
            elif start > int(str(cb.time).split(":")[0]) and start > int(
                str(cb.end_time).split(":")[0]
            ):
                messages.add_message(request, messages.SUCCESS, "This TIME is Ok")
                return render(request, "index.html", {"form": form})
            elif start < int(str(cb.time).split(":")[0]) and start < int(
                str(cb.end_time).split(":")[0]
            ):
                print("ok")
                pbooking = PersonBooking()
                device = Devices.objects.get(id=devices)
                pbooking.name = name
                pbooking.email = email
                pbooking.contact = contact
                pbooking.date = date_1
                pbooking.end_time = end_time
                pbooking.time = start_time
                pbooking.devices = device
                messages.add_message(request, messages.SUCCESS, "This TIME is Ok")
                pbooking.save()
                return render(request, "index.html", {"form": form})
            elif start > int(str(cb.time).split(":")[0]) and start < int(
                str(cb.end_time).split(":")[0]
            ):
                print("error")
                messages.add_message(
                    request, messages.ERROR, "This Time is already booked"
                )
                return render(request, "index.html", {"form": form, "data": data})

        year = date_1.split("-")[0].split("0")[1]
        month = date_1.split("-")[1]
        day = date_1.split("-")[2]
        date_final = year + "-" + month + "-" + day
        print(date_final)
        today = date.today().strftime("%y-%m-%d")

        print(today)
        if date_final < today:
            messages.add_message(
                request, messages.ERROR, "Date should be  today or greater than today"
            )
            return render(request, "index.html", {"form": form, "data": data})

            # return HttpResponse('<div style="color:green;"> This is Date is Ok </div>')
        pbooking = PersonBooking()
        device = Devices.objects.get(id=devices)
        pbooking.name = name
        pbooking.email = email
        pbooking.contact = contact
        pbooking.date = date_1
        pbooking.end_time = end_time
        pbooking.time = start_time
        pbooking.devices = device

        pbooking.save()
        messages.add_message(
            request, messages.SUCCESS, "Booking was succuess created successfully"
        )

        print(name, email, contact, devices, date, end_time, start_time)

    return render(request, "index.html", {"form": form})


@login_required
def add_device(request):
    form = DeviceForm()

    context = {
        "form": form,
        "data": request.POST,
    }
    if request.method == "POST":
        form = DeviceForm(request.POST)
        context = {
            "form": form,
            "data": "",
        }

        if form.is_valid():
            form.save()
            return redirect("device-list")
        else:
            return render(request, "add_device.html", context)
    return render(request, "add_device.html", context)


@login_required
def device_list(request):
    devices = Devices.objects.all()

    for device in devices:
        print(device)
        print(device.cables.all())
    context = {"devices": devices}
    return render(request, "device_list.html", context)
